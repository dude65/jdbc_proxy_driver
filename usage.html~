<!DOCTYPE html>
<html>
<head>
<title>Proxy driver - usage</title>
<meta name="generator" content="Bluefish 2.2.7" >
<meta name="author" content="Ondra" >
<meta name="date" content="2016-05-17T15:58:46+0200" >
<meta name="copyright" content="">
<meta name="keywords" content="">
<meta name="description" content="">
<meta name="ROBOTS" content="NOINDEX, NOFOLLOW">
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="content-type" content="application/xhtml+xml; charset=UTF-8">
<meta http-equiv="content-style-type" content="text/css">
<meta http-equiv="expires" content="0">
</head>

<body>

<h1>Proxy driver - usage</h1>

<h2>Connecting to driver</h2>
<ul>
<li><b>Class:</b> org.fit.proxy.jdbc.ProxyDriver</li>
<li><b>URL prefix:</b> jdbc:proxy:</li>
<li><b>Path:</b> path to properties file</li>
</ul>

<h3>Code examples:</h3>

<code>Class.forName("org.fit.proxy.jdbc.ProxyDriver");<br>
Connection proxyConnection = DriverManager.getConnection("jdbc:proxy:../properties/proxy.properties");</code>
<p>----</p>
<code>import org.fit.proxy.jdbc.ProxyDriver;<br>
...<br>
DriverManager.registerDriver(new ProxyDriver());<br>
Connection proxyConnection = DriverManager.getConnection("jdbc:proxy:../properties/proxy.properties");</code>

<p>There is also a possibility to get a connection with given properties only without URL:</p>
<code>import org.fit.proxy.jdbc.ProxyDriver;<br>
...<br>
Properties proxyProperties = new Properties();<br>
proxyProperties.load("../properties/proxy.properties");<br>
Driver proxyDriver = new ProxyDriver();<br>
Connection proxyConnection = proxyDriver(null, proxyProperties);</code>

<p>When URL and Properties are given, properties file given by URL is selected</p>
<code>import org.fit.proxy.jdbc.ProxyDriver;<br>
...<br>
Properties proxyProperties = new Properties();<br>
proxyProperties.load("../properties/anotherProxy.properties");<br>
Driver proxyDriver = new ProxyDriver();<br>
Connection proxyConnection = proxyDriver("jdbc:proxy:../properties/selectedProxy.properties", proxyProperties);</code>

<p>If no URL and Properties are given, it tries to search for properties in current directory with name: config.properties</p>
<code>import org.fit.proxy.jdbc.ProxyDriver;<br>
...<br>
Driver proxyDriver = new ProxyDriver();<br>
Connection proxyConnection = proxyDriver(null, null); //URL is same as "jdbc:proxy:./config.properties"</code>


<h2>Properties settings:</h2>

<ul>
<li><b>items</b> (compulsory) - number of databases to connect</li>
<li><b>dbX_driver</b> (compulsory) - class of driver for database connections</li>
<li><b>dbX_url</b> (compulsory) - URL of database to connect</li>
<li><b>dbX_name</b> (compulsory) - name of how do you wish to name this connection</li>
<li><b>dbX_user</b> (optional) - database user</li>
<li><b>dbX_password</b> (optional) - database password</li>
<li><b>dbX_regexp</b> (compulsory) - regular expression associated to the connection</li>
<li><b>default</b> (optional) - name of database to which should be oriented all SQL queries that are not associated</li>

<p>It is not allowed to have two database connections with the same name.</p>
</ul>

<h3>Properties example:</h3>
<code>items=2<br>
db0_driver=com.mysql.jdbc.Driver<br>
db0_url=jdbc:mysql://localhost/proxyDatabase1<br>
db0_name=MyDatabase1<br>
db0_user=proxyDriver1<br>
db0_password=heslo1<br>
db0_regexp=^UPDATE*<br>
db1_driver=com.mysql.jdbc.Driver<br>
db1_url=jdbc:mysql://localhost/proxyDatabase2?user=proxyDriver2&password=heslo2<br>
db1_name=MyDatabase2<br>
db1_regexp=^SELECT*<br>
default=MyDatabase2</code>

<h2>Using driver examples:</h2>
<p>Using driver is very simple, use it like standard JDBC driver. Suppose that properties settings are same in following examples as they are in previous and data are the same in both databases.</p>

<h3>Code example:</h3>
<code>//open connection<br>
Class.forName("org.fit.proxy.jdbc.ProxyDriver");<br>
Connection proxyConnection = DriverManager.getConnection("jdbc:proxy:../properties/proxy.properties");<br>
<br>
Statement proxyStatement = proxyConnection.createStatement();<br>
<br>
//update data in first database<br>
proxyStatement.execute("UPDATE `persons` SET firstName = 'Lazy' WHERE ID = 8");<br>
<br>
//print data from second database<br>
ResultSet rs = proxyStatement.executeQuery("SELECT * FROM `persons`");<br>
while (rs.next()) {<br>
	System.out.println(rs.getString(1) + "," + rs.getString(2) + "," + rs.getString(3));<br>
}<br>
<br>
//setting auto commit = false<br>
proxyConnection.setAutoCommit(false);<br>
<br>
proxyStatement.executeQuery("UPDATE persons SET `homeID` = 2 WHERE `homeID` = 1"); //updates MyDatabase1<br>
proxyStatement.executeQuery("INSERT INTO `homes` (`street`, `city`, `houseNumber`, `zipCode`) VALUES ('Svobodná', 'Svobodov', '1', '1')"); //updates MyDatabase2 (is default)<br>
<br>
//rollback<br>
proxyConnection.rollback();<br>
<br>
//New feature - setting default connection<br>
ProxyConnection proxy = (ProxyConnection) proxyConnection;<br>
<br>
//setting connection which is not present - will fail<br>
<br>
try {<br>
	proxy.setDefaultConnection("Nonsense");<br>
} catch (SQLException e) {<br>
	System.err.println(e.getMessage()); //will be printed<br>
}<br>
<br>
//setting default connection correctly<br>
proxy.setDefaultConnection("MyDatabase1");<br>
proxyStatement.executeQuery("INSERT INTO `homes` (`street`, `city`, `houseNumber`, `zipCode`) VALUES ('Svobodná', 'Svobodov', '1', '1')"); //updates MyDatabase1 (is default)<br>
<br>
//unset default connection<br>
proxy.unsetDefaultConnection();<br>
<br>
//Trying to execute queries that are not associated - an exception will be thrown<br> 
try {<br>
proxyStatement.executeQuery("INSERT INTO `homes` (`street`, `city`, `houseNumber`, `zipCode`) VALUES ('Svobodná', 'Svobodov', '1', '1')"); //will fail - query is not associated to any database connection<br>
} catch (SQLException e) {<br>
	System.err.println(e.getMessage());<br> //will be printed
}<br>
//close connection<br>
proxyStatement.close();<br>
proxyConnection.close();
</code>

<h2>Advices:</h2>
<p>The only thing that is set on start is auto commit = true. Setting of one thing will affect all connection. Furthermore, asking for value of connection attribute will probably fail if called before setting.</p>

<h3>Examples:</h3>
<h4>Wrong:</h4>
<code>Class.forName("org.fit.proxy.jdbc.ProxyDriver");<br>
Connection proxyConnection = DriverManager.getConnection("jdbc:proxy:../properties/proxy.properties");<br>
<br>
boolean readOnly = proxyConnection.isReadOnly(); //will fail<br>
proxyConnection.setReadOnly(true); //will not be executed
</code>

<h4>Right:</h4>
<code>Class.forName("org.fit.proxy.jdbc.ProxyDriver");<br>
Connection proxyConnection = DriverManager.getConnection("jdbc:proxy:../properties/proxy.properties");<br>
<br>
proxyConnection.setReadOnly(true);<br>
boolean readOnly = proxyConnection.isReadOnly(); //correct
</code>

<h2>Unsupported features:</h2>
<p>Not written yet</p>

</body>
</html>